version: '3.7'
services:
  # DEBEZIUM_VERSION is stored in .env file, to allow for easier switching from version
  # Zookeeper is where Kafka stores infomation abouts different nodes, e.g. itself
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
    volumes:
      - zk-data:/zookeeper/data:rw
      - zk-txns:/zookeeper/txns:rw
      - zk-logs:/zookeeper/logs:rw
  # Kafka, one node. In production, you'd want two or more kafka nodes
  kafka:
      image: debezium/kafka:${DEBEZIUM_VERSION}
      ports:
      - 9094:9094
      links:
      - zookeeper
      environment:
        # Set the KAFKA_ADVERTISED_HOST_NAME to your laptop/work computer's hostname during development
        - "KAFKA_ADVERTISED_HOST_NAME=${KAFKA_ADVERTISED_HOST_NAME}"
        - "ZOOKEEPER_CONNECT=zookeeper:2181"
        - "KAFKA_ADVERTISED_LISTENERS=INSIDE://:9092,OUTSIDE://${KAFKA_ADVERTISED_HOST_NAME}:9094"
        - "KAFKA_LISTENERS=INSIDE://:9092,OUTSIDE://:9094"
        - "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
        - "KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE"     
      volumes:
        - kafka-data:/kafka/data:rw
        - kafka-logs:/kafka/logs:rw

  # Example postgres instance
  postgres:
    image: debezium/example-postgres:${DEBEZIUM_VERSION}
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres
  
  # Example mysql instance
  mysql:
    image: debezium/example-mysql:${DEBEZIUM_VERSION}
    ports:
     - 3306:3306
    environment:
     - MYSQL_ROOT_PASSWORD=debezium
     - MYSQL_USER=mysqluser
     - MYSQL_PASSWORD=mysqlpw

  # Example sqlserver instance
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2017-latest
    ports:
     - 1433:1433
    environment:
     - ACCEPT_EULA=Y
     - MSSQL_PID=Standard
     - SA_PASSWORD=Password123
     - MSSQL_AGENT_ENABLED=true

  # Kafka connect, with Debezium connectors (e.g. plugins) added.
  connect:
    image: debezium/connect:${DEBEZIUM_VERSION}
    ports:
     - 8083:8083
    links:
     - kafka
     - sqlserver
     - apicurio-registry
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - ENABLE_APICURIO_CONVERTERS=true
     - STATUS_STORAGE_TOPIC=my_connect_statuses

# AKHQ, a Kafka UI, From https://github.com/tchiotludo/akhq/blob/dev/docker-compose.yml
  akhq:
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://apicurio-registry:8080"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - "8080:8080"
    links:
      - kafka
      - connect

  apicurio-registry:
    image: apicurio/apicurio-registry-jpa:1.3.2.Final
    hostname: apicurio-registry
    depends_on:
      - postgres-apicurio
    ports:
      - "8085:8080"
    environment:
      - "QUARKUS_PROFILE=prod"
      - "QUARKUS_DATASOURCE_URL=jdbc:postgresql://postgres-apicurio/apicurio-registry"
      - "QUARKUS_DATASOURCE_USERNAME=apicurio-registry"
      - "QUARKUS_DATASOURCE_PASSWORD=password"
      - "REGISTRY_DATASOURCE_URL=jdbc:postgresql://postgres-apicurio/apicurio-registry"
      - "REGISTRY_DATASOURCE_USERNAME=apicurio-registry"
      - "REGISTRY_DATASOURCE_PASSWORD=password"


  postgres-apicurio:
    image: postgres
    hostname: schema-registry-db
    environment:
      - "POSTGRES_USER=apicurio-registry"
      - "POSTGRES_PASSWORD=password"
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    volumes:
      - postgres-apicurio-data:/var/lib/postgresql/data/pgdata

volumes:
  zk-data:
  zk-txns:
  zk-logs:
  kafka-data:
  kafka-logs:
  postgres-data:
  postgres-apicurio-data:
